<Project>

  <PropertyGroup>
    <PackageId Condition="'$(PackageId)' == ''">$(AssemblyName)</PackageId>
    <Description Condition="'$(Description)' == ''">$(PackageId)</Description>
    <PackageProjectUrl Condition="'$(PackageProjectUrl)' == ''">https://docs.particular.net/nuget/$(PackageId)</PackageProjectUrl>
    <BlockInvalidTargetFrameworksPath>$(ParticularPackagingPackagePath)BlockInvalidTargetFrameworks\</BlockInvalidTargetFrameworksPath>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IncludeBuildOutput)' == 'false'">
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <DocumentationFile />
  </PropertyGroup>

  <PropertyGroup Condition="'$(IncludeSourceFilesInPackage)' == 'true'">
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);AddSourceFilesToPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\..\$(PackageLicenseFile)" Condition="'$(PackageLicenseFile)' != '' And Exists('..\..\$(PackageLicenseFile)')" Pack="true" PackagePath="" Visible="false" />
    <None Include="..\..\$(PackageReadmeFile)" Condition="'$(PackageReadmeFile)' != '' And Exists('..\..\$(PackageReadmeFile)')" Pack="true" PackagePath="" Visible="false" />
    <None Include="..\..\THIRD-PARTY-NOTICES.txt" Condition="Exists('..\..\THIRD-PARTY-NOTICES.txt')" Pack="true" PackagePath="" Visible="false" />
    <None Include="$(ParticularPackagingPackagePath)$(PackageIcon)" Condition="'$(PackageIcon)' != '' And Exists('$(ParticularPackagingPackagePath)$(PackageIcon)')" Pack="true" PackagePath="" Visible="false" />
  </ItemGroup>

  <ItemGroup Condition="'$(BlockInvalidTargetFrameworks)' != 'false' And '$(IncludeBuildOutput)' != 'false' And ('$(PackageType)' == '' Or '$(PackageType)' == 'Dependency') And '$(TargetFrameworks)' == 'net472;net6.0'">
    <None Include="$(BlockInvalidTargetFrameworksPath)BlockNetCore.targets" Condition="Exists('$(BlockInvalidTargetFrameworksPath)BlockNetCore.targets')" Pack="true" PackagePath="build\netcoreapp2.0\$(PackageId).targets" Visible="false" />
    <None Include="$(BlockInvalidTargetFrameworksPath)BlockNetFramework.targets" Condition="Exists('$(BlockInvalidTargetFrameworksPath)BlockNetFramework.targets')" Pack="true" PackagePath="build\net461\$(PackageId).targets" Visible="false" />
    <None Include="$(BlockInvalidTargetFrameworksPath)BlockNetStandard.targets" Condition="Exists('$(BlockInvalidTargetFrameworksPath)BlockNetStandard.targets')" Pack="true" PackagePath="build\netstandard2.0\$(PackageId).targets" Visible="false" />
    <None Include="$(BlockInvalidTargetFrameworksPath)\_._" Condition="Exists('$(BlockInvalidTargetFrameworksPath)_._')" Pack="true" PackagePath="build\net472;build\net6.0" Visible="false" />
  </ItemGroup>

  <ItemGroup Condition="'$(BlockInvalidTargetFrameworks)' != 'false' And '$(IncludeBuildOutput)' != 'false' And ('$(PackageType)' == '' Or '$(PackageType)' == 'Dependency') And '$(IsInnerBuild)' != 'true' And '$(TargetFramework)' == 'net472'">
    <None Include="$(BlockInvalidTargetFrameworksPath)BlockNetFramework.targets" Condition="Exists('$(BlockInvalidTargetFrameworksPath)BlockNetFramework.targets')" Pack="true" PackagePath="build\net461\$(PackageId).targets" Visible="false" />
    <None Include="$(BlockInvalidTargetFrameworksPath)BlockNetStandardAndNetCore.targets" Condition="Exists('$(BlockInvalidTargetFrameworksPath)BlockNetStandardAndNetCore.targets')" Pack="true" PackagePath="build\netstandard2.0\$(PackageId).targets" Visible="false" />
    <None Include="$(BlockInvalidTargetFrameworksPath)\_._" Condition="Exists('$(BlockInvalidTargetFrameworksPath)_._')" Pack="true" PackagePath="build\net472" Visible="false" />
  </ItemGroup>

  <Target Name="ConvertProjectReferenceVersionsToVersionRanges" AfterTargets="_GetProjectReferenceVersions">
    <PropertyGroup>
      <NumberOfProjectReferences>@(_ProjectReferencesWithVersions->Count())</NumberOfProjectReferences>
    </PropertyGroup>
    <ItemGroup Condition="$(NumberOfProjectReferences) &gt; 0">
      <_ProjectReferencesWithVersionRanges Include="@(_ProjectReferencesWithVersions)">
        <ProjectVersion>[%(_ProjectReferencesWithVersions.ProjectVersion), $([MSBuild]::Add($([System.Text.RegularExpressions.Regex]::Match('%(_ProjectReferencesWithVersions.ProjectVersion)', '^\d+').Value), '1')))</ProjectVersion>
      </_ProjectReferencesWithVersionRanges>
      <_ProjectReferencesWithVersions Remove="@(_ProjectReferencesWithVersions)" />
      <_ProjectReferencesWithVersions Include="@(_ProjectReferencesWithVersionRanges)" />
    </ItemGroup>
  </Target>

  <Target Name="AddSourceFilesToPackage">
    <ItemGroup>
      <_File Remove="@(_File)"/>
      <_File Include="$(MSBuildProjectDirectory)\**\*.cs" TargetDir="contentFiles/cs/$(TargetFramework)/$(MSBuildProjectName.Replace('NServiceBus', 'NSB'))" BuildAction="Compile" />
      <_File Include="$(MSBuildProjectDirectory)\**\*.cs" TargetDir="content/$(TargetFramework)/App_Packages/$(MSBuildProjectName.Replace('NServiceBus', 'NSB')).$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)" Condition="'$(TargetFramework.Contains(`.`))' == 'false'" />
      <_File Include="@(AddSourceFileToPackage)" TargetDir="contentFiles/cs/$(TargetFramework)/$(MSBuildProjectName.Replace('NServiceBus', 'NSB'))" BuildAction="Compile" />
      <_File Include="@(AddSourceFileToPackage)" TargetDir="content/$(TargetFramework)/App_Packages/$(MSBuildProjectName.Replace('NServiceBus', 'NSB')).$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)" Condition="'$(TargetFramework.Contains(`.`))' == 'false'" />
      <_File Remove="$(MSBuildProjectDirectory)\obj\**\*.cs" />
      <_File Remove="@(RemoveSourceFileFromPackage -> '%(FullPath)')" />
      <TfmSpecificPackageFile Include="@(_File)" PackagePath="%(_File.TargetDir)/%(_File.RecursiveDir)%(_File.FileName)%(_File.Extension)"/>
    </ItemGroup>
  </Target>

  <Target Name="AddMinVerAssemblyMetadata" AfterTargets="MinVer">
    <ItemGroup>
      <AssemblyMetadata Include="MajorMinorPatch" Value="$(MinVerMajor).$(MinVerMinor).$(MinVerPatch)" />
    </ItemGroup>
  </Target>

  <Target Name="WriteMinVerProperties" DependsOnTargets="MinVer" AfterTargets="Build" Condition="'$(GITHUB_ACTIONS)' == 'true' And '$(WriteMinVerProperties)' != 'false' And '$(IsInnerBuild)' != 'true'">
    <ItemGroup>
      <MinVerProperties Include="MinVerVersion=$(MinVerVersion)" />
      <MinVerProperties Include="MinVerMajor=$(MinVerMajor)" />
      <MinVerProperties Include="MinVerMinor=$(MinVerMinor)" />
      <MinVerProperties Include="MinVerPatch=$(MinVerPatch)" />
      <MinVerProperties Include="MinVerPreRelease=$(MinVerPreRelease)" />
      <MinVerProperties Include="MinVerBuildMetadata=$(MinVerBuildMetadata)" />
    </ItemGroup>
    <WriteLinesToFile File="$(GITHUB_ENV)" Lines="@(MinVerProperties)" ContinueOnError="WarnAndContinue" />
  </Target>

  <Target Name="WorkaroundForTestHostBeingAddedAsContent" BeforeTargets="_GetPackageFiles" Condition="'$(IsTestProject)' == 'true'">
    <ItemGroup>
      <Content Update="**\testhost.*" Pack="false" />
    </ItemGroup>
  </Target>

  <Target Name="VerifySdkVersion" BeforeTargets="CoreCompile" Condition="$([MSBuild]::VersionLessThan($(NETCoreSdkVersion), '8.0.100'))">
    <Error Text="Particular.Packaging requires .NET SDK 8.0.100 or greater. Version being used: $(NETCoreSdkVersion)" />
  </Target>

</Project>